rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		// PROJECTS
		// -------------------------

		match /projects/{projectId} {
			allow read: if request.auth.uid != null;

			allow create: if validCreatorId()
			 							&& isSignedIn()
			 							&& isProject(request.resource.data);

			allow delete: if request.auth.uid == resource.data.creator.uid;
		}

		function isProject(doc) {
			return doc.size() == 4
			&& doc.name is string
			&& doc.description is string
			&& doc.uid is string
			&& doc.creator is map;
		}


		// USERS
		// ----------------------------
		match /users/{userId} {
			allow read: if true;
		}

		function isUser(doc) {
			return doc.size() == 3
			&& doc.uid is string
			&& doc.displayName is string 
			&& doc.private is bool
			&& doc.username is string
			&& doc.avatar_url is string
		}


		//  UTILS 
		// --------------------------

		function validCreatorId() { return request.auth.uid == request.resource.data.creator.uid; }
		function isSignedIn() { return request.auth != null }

		function incomingData() { return request.resource.data }
		function existingData() { return resource.data }

		function requestor() { return request.auth }
		function requestorEmail() { return requestor().token.email }
		function requestorEmailIsVerified() { return requestor().token.email_verified }


		function isSelf(uid) { return requestor().uid == uid } 

		function madeBySelf(uid) { return requestor().uid == existingData().creator.id }
		function isPublic() { return existingData().isPrivate == false }

		function belongsTo(userId) {
			return request.auth.uid == userId;
		}


		/* function hasWritePermision(userId, itemId) { */
		/* 	// get the item */
		/* 	// get the ACL for the item */
		/* 	// check if userId has write permissions on ACL */
		/* } */

  }
}